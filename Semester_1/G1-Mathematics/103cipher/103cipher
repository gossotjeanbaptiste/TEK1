#!/usr/bin/env python3

#!/usr/bin/env python3

from math import *
from sys import *


def create_matrix(rows, cols):
    return [[0 for _ in range(cols)] for _ in range(rows)]


def smallest_matrix_square(str):
    length = len(str)
    size = ceil(sqrt(length))
    return size


def string_to_matrix(str):
    size = smallest_matrix_square(str)
    matrix = create_matrix(size, size)
    for i in range(len(str)):
        row = i // size
        col = i % size
        matrix[row][col] = ord(str[i])
    return matrix


def string_to_n_column_matrix(str, n):
    size = ceil(len(str) / n)
    matrix = create_matrix(size, n)
    for i in range(len(str)):
        row = i // n
        col = i % n
        matrix[row][col] = ord(str[i])
    return matrix


def matrix_multiplier(matrix1, matrix2):
    result = create_matrix(len(matrix1), len(matrix2[0]))
    for i in range(len(matrix1)):
        for j in range(len(matrix2[0])):
            for k in range(len(matrix2)):
                result[i][j] += matrix1[i][k] * matrix2[k][j]
    return result


def matrix_transpose(matrix):
    result = create_matrix(len(matrix[0]), len(matrix))
    for i in range(len(matrix[0])):
        for j in range(len(matrix)):
            result[i][j] = matrix[j][i]
    return result


def matrix_determinant(matrix):
    size = len(matrix)
    if size != len(matrix[0]):
        return 84
    if size == 1:
        return matrix[0][0]
    if size == 2:
        return matrix[0][0] * matrix[1][1] - matrix[0][1] * matrix[1][0]
    determinant = 0
    for j in range(size):
        minor = [[matrix[m][n]
                  for n in range(size) if n != j] for m in range(1, size)]
        cofactor = ((-1) ** j) * matrix[0][j] * matrix_determinant(minor)
        determinant += cofactor
    return determinant


def matrix_cofactor(matrix, i, j):
    if len(matrix) != 3 or len(matrix[0]) != 3:
        return 84
    minor = [[matrix[m][n]
              for n in range(3) if n != j] for m in range(3) if m != i]
    cofactor = ((-1) ** (i + j)) * \
        (minor[0][0] * minor[1][1] - minor[0][1] * minor[1][0])
    return cofactor


def matrix_inverse(matrix):
    size = len(matrix)
    if size != len(matrix[0]):
        return 84
    determinant = matrix_determinant(matrix)
    if determinant == 0:
        return 84
    cofactor_matrix = create_matrix(size, size)
    for i in range(size):
        for j in range(size):
            minor = [[matrix[m][n] for n in range(
                size) if n != j] for m in range(size) if m != i]
            cofactor_matrix[i][j] = ((-1) ** (i + j)) * \
                matrix_determinant(minor)
    adjugate_matrix = matrix_transpose(cofactor_matrix)
    inverse_matrix = [[adjugate_matrix[i][j] /
                       determinant for j in range(size)] for i in range(size)]
    return inverse_matrix


def main(ac, av):
    if av[1] == "-h":
        print("USAGE \n\t./103cipher message key flag\n")
        print("DESCRIPTION")
        print("\tmessage\t\ta message, made of ASCII characters")
        print("\tkey\t\tthe encryption key, made of ASCII characters")
        print("\tflag\t\t0 for the message to be encrypted, 1 to be decrypted")
        return 0
    if ac == 1:
        return 84
    if ac > 4:
        return 84
    if ac < 4:
        return 84
    if (type(av[1]) is str) and \
    (type(av[2]) is str) and \
    (type(av[3]) is str):
        cipher(ac, av)
    else:
        return 84


def cipher(ac, av):
    if ac != 4:
        return 84
    message = av[1]
    key = av[2]
    flag = int(av[3])
    if flag != 0 and flag != 1:
        return 84
    if flag == 0:
        matrix = string_to_matrix(message)
        key_matrix = string_to_n_column_matrix(key, len(matrix))
        result = matrix_multiplier(matrix, key_matrix)
        for i in range(len(result)):
            for j in range(len(result[0])):
                print(result[i][j], end="")
                if j < len(result[0]) - 1:
                    print(" ", end="")
            print()
    else:
        matrix = string_to_n_column_matrix(message, len(key))
        key_matrix = string_to_n_column_matrix(key, len(matrix[0]))
        inverse_key_matrix = matrix_inverse(key_matrix)
        if inverse_key_matrix == 84:
            return 84
        result = matrix_multiplier(matrix, inverse_key_matrix)
        for i in range(len(result)):
            for j in range(len(result[0])):
                print(chr(round(result[i][j])), end="")
            print()


if __name__ == "__main__":
    '''print(f"Type av[1] {type(argv[0])} \n \
          type av[2] {type(argv[1])} \n \
          type av[3] {type(argv[2])} \n \
          type av[4] {type(argv[3])}")'''
    main(len(argv), argv)
